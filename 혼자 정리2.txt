Oracle Data Type

숫자 : 정수 : ex) number(4) -> 4자리까지 표현가능
        실수 : ex) number(전체자릿수, 소수점자릿수)

문자 : CHAR(byte)  ex) char(4) -> 4byte -> 고정 크기 (고정된 값으로 미리 만들기 때문에 성능은 뛰어나지만 메모리측면에선 효율이 떨어짐)
        VARCHAR2(byte) ex) varchar2(4) -> 4byte -> 가변 크기 (어떤 데이터가 들어올지 모르기때문에 성능이 떨어지지만 메모리측면에선 효율적)

날짜 : DATE


sqldeveloper

--hr 계정 비밀번호 변경
alter user hr identified by br;

----hr 계정 비밀번호 변경 + hr계정 lock풀기
alter user hr identified by hr account unlock;


식별자(identifier) : 프로그램언어에서 사용하는 단어의미

select * from department

시스템이 미리 정의한 단어 : select from 변경 x

사용자가 정의한 단어 : department(테이블명) 임의로 지정가능

oracle에서 문자,날짜 사용시 ' '(작은 따옴표)사용 

ex) select employee_id from employees where employ_name ='smith'

별칭 사용시 as, " "(큰 따옴표)생략가능, 공백칸 주의해서 사용


SELECT last_name 이름, salary 월급, salary * 12 연봉
FROM employees;

SELECT last_name  as "이름", salary as "월급", salary * 12 as "연봉"
FROM employees;


null : 값 없음, 비어있는 형태

모든 컬럼은 기본적으로 null 허용 -> not null제약조건으로 null허용 금지할 수 있음

null값 + 값 연산은 항상 null -> 해결 방법 : 함수 nvl(컬럼명,null일 때 사용할 값)

nvl에서 컬럼명의 값이 null이 아니면 원래값 사용, null이면 null일 때 사용할 값을 사용

컬러명이 숫자면 null일때 사용할 값 또한 숫자로, 문자나 날짜면 ' ' 사용

정렬 시 null값은 오름차순(기본)일 때 가장 끝에, 내림차순일 때 가장 앞에


null값만 찾기 -> is null연산자, is not null 연산자

select last_name || salary as "이름 월급" from employees;

||사용하면 컬럼을 연결할 수 있다.

select last_name || '사원' from employees;

컬럼과 리터럴값을 연결 할 수 도 있다.
-> a사원, b사원 '''

SELECT last_name || '의 직업은 ' || job_id || ' 입니다' as "사원별 직급" FROM employees;

select [distinct] {*,column,[alias]} from table_name;

식별자는 대소문자 구분하지않지만 리터럴값은 대소문자 구분하므로 주의

값 비교 문자는 아스키코드값으로 비교 (A: 65, a:97), 날짜는 7byte 숫자로 비교

oracle날짜 기본 설정은 'RR 혹은 YY/MM/DD'형식

developer 날짜 형식 바꾸기 도구 -> 환경설정 -> nls

SELECT employee_id,last_name,salary,hire_date
FROM employees
WHERE last_name BETWEEN 'A' AND 'K';

숫자와 문자 날짜 범위 지정할땐 between a and b

where 컬럼명 in (값1,값2,값3)

존재하는 값만 찾아줌


LIKE연산자

J% : J로 시작하는 

%A: A로 끝나는

%X%: X가 들어가는


J_ : 이름이 2글자 이면서 J로 시작

_A : 이름이 2글자 이면서 A로 끝나는

_X_ : X가들어가는 3글자 


와일드카드_가 아닌 문자_를 포함된 이름을 찾을 때

WHERE JOB_ID LIKE '%$_%' ESCAPE '$';

$뒤에 _는 와일드카드가 아닌 보통 문자로 처리

ESCAPE '$' $바로뒤에오는 와일드카드(%,_)는 그냥 문자로 처리

SELECT last_name,job_id,salary
FROM employees
WHERE job_id = 'IT_PROG' AND salary >= 5000;

AND, OR, NOT

AND : 둘다 만족 OR : 하나라도 만족 NOT : 부정

괄호 > NOT > 비교 > AND > OR


IS NULL, IS NOT NULL

SELECT LAST_NAME,JOB_ID,SALARY
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

------------------------------------------------------

SELECT last_name,job_id,salary,commission_pct
FROM employees
WHERE job_id ='AC_MGR' OR job_id='MK_REP'
AND commission_pct IS NULL
AND salary >=4000
AND salary <= 9000;

---------OR연산에 괄호 적용---------------------------

SELECT last_name,job_id,salary,commission_pct
FROM employees
WHERE ( job_id ='AC_MGR' OR job_id='MK_REP' )
AND commission_pct IS NULL
AND salary >=4000
AND salary <= 9000;

------------------------------------------------------

SELECT employee_id,last_name,job_id,salary as "월급“ FROM employees
ORDER BY 월급 DESC;

salary로 내림차순 정렬

SELECT employee_id,last_name,job_id,salary as "월급“ FROM employees
ORDER BY 4 DESC;

네번째 컬럼의 값을 기준으로 내림차순 정렬


SELECT employee_id,last_name,salary,hire_date
FROM employees
ORDER BY salary DESC, hire_date;

salary로 내림차순 후 같은 임금이면 hiredate로 오름차순 정렬 (Default 오름차순)


단일행 함수 행 단위로 실행하므로 레코드별 출력값나옴

그룹 함수는 여러개의 컬럼값중 하나의 출력값이 나옴(최댓값, 합계, 평균)

